# action.yml
# required permissions:
# actions: read  # optional for extended integration
# security-events: write  # required to upload SARIF results
# contents: read # required to perform the scan
---
name: 'ShellCheck SARIF Analysis'
description: 'ShellCheck SARIF Analysis Scan'
branding:
  icon: 'code'
  color: 'silver'
inputs:
  path:
    description: 'File or directory to run shellcheck on. Default is to use git to match paths'
    required: false
    default: 'UNDEFINED'
  match:
    description: |
      Glob-style pattern of files or directories to match and run shellcheck on.
      Only works with git tracked files.
    required: false
    type: string
    default: '**/*.{bash,sh,command}'
  severity:
    description: |
      Report only issues of a given severity level or higher. Can be STYLE, INFO, WARNING,
      or ERROR. Default is style.
    required: false
    default: 'style'
    type: choice
    options:
      - style
      - info
      - warning
      - error
      - default
  shell-format:
    description: |
      Interpret shells as of a given variant. Can be BASH, POSIX, DASH, KSH, or BUSYBOX.
      Default is automatic.
    required: false
    default: 'AUTOMATIC'
  token:
    description: |
      The token used to authenticate when fetching Python distributions from
      https://github.com/actions/python-versions. When running this action on github.com,
      the default value is sufficient. When running on GHES, you can pass a personal access
      token for github.com if you are experiencing rate limiting.
    default: ${{ github.server_url == 'https://github.com' && github.token || '' }}
    required: true
  publish-artifacts:
    description: 'Also upload results for downloading. (Does not affect GitHub scan alerts)'
    type: boolean
    default: true
    required: true
outputs:
  python-version:
    description: "The python version that was used in the run."
    value: ${{ steps.cp313.outputs.python-version || '' }}
  artifact-id:
    description: "The uploaded artifact-id"
    value: ${{ steps.artifact-upload-step.outputs.artifact-id }}
  artifact-url:
    description: "The uploaded artifact-url"
    value: ${{ steps.artifact-upload-step.outputs.artifact-url }}
  artifact-digest:
    description: "The uploaded artifact-digest"
    value: ${{ steps.artifact-upload-step.outputs.artifact-digest }}

runs:
  using: composite
  steps:
    - name: "Setup Python"
      uses: actions/setup-python@v5
      id: cp313
      with:
        python-version: '3.13'
        cache: 'pip'  # caching pip dependencies
    - name: "Install ShellCheck Scan dependencies"
      shell: bash
      run: |
        echo '::group::Python-Version'
        echo '${{ steps.cp313.outputs.python-version }}'
        echo '::endgroup::'
        echo '::group:: Install sarif-om'
        pip --python ${{ steps.cp313.outputs.python-path }} install "sarif-om>=1.0.4" ;
        echo '::endgroup::'
        echo '::group:: Install requests'
        pip --python ${{ steps.cp313.outputs.python-path }} install "requests>=2.32.3" ;
        echo '::endgroup::'
      if: ${{ !cancelled() }}

    - name: "Get Matching Files"
      id: shellfiles
      env:
        GIT_MATCH_PATTERN: ${{ (inputs.path == 'UNDEFINED') && inputs.match || '' }}
      shell: bash
      run: |
        FILES=$(git ls-files --exclude-standard -- ${{ env.GIT_MATCH_PATTERN }} )
        if [ -z "$FILES" ]; then
          printf "%s\n" "No matching files found."
          printf "%s\n" "files=" >> "$GITHUB_OUTPUT"
        else
          printf "%s\n" "Matching files found:"
          printf "%s\n" "$FILES"
          # Replace line breaks with spaces for GitHub Action Output
          FILES="${FILES//$'\n'/ }"
          printf "%s\n" "files=$FILES" >> "$GITHUB_OUTPUT"
        fi
      if: ${{ !cancelled() && (inputs.path == 'UNDEFINED') }}

    - name: "Run ShellCheck and Generate SARIF"
      shell: bash
      run: |
        echo "::group::Shellcheck"

        LOWERCASE_SHELL=$(echo $INPUT_SHELL | tr A-Z a-z)
        case $LOWERCASE_SHELL in
        bash)
          echo "::debug::Bourne Again Shell mode selected."  # Easter egg
          SHELL_TYPE="--shell=bash"
          ;;
        sh|posix)
          echo "::debug::POSIX mode selected."  # Easter egg
          SHELL_TYPE="--shell=sh"
          ;;
        dash)
          SHELL_TYPE="--shell=dash"
          ;;
        busybox|busy-box)
          echo "::debug::busybox mode is not just normal sh."  # Easter egg
          SHELL_TYPE="--shell=busybox"
          ;;
        busybox|busy-box)
          echo "::debug::korny? sh. Shh!"  # Easter egg
          SHELL_TYPE="--shell=busybox"
          ;;
        *)
          echo "::debug::No shell mode selected, will default to attempting to auto-detect."
          SHELL_TYPE=""
          ;;
        esac

        UPPERCASE_SEVERITY=$(echo $INPUT_SEVERITY | tr a-z A-Z)
        case $UPPERCASE_SEVERITY in
        STYLE|DEFAULT)
          echo "::debug::Strict style severity selected."
          SEVERITY="--severity=style"
          ;;
        INFO|DEFAULT)
          echo "::debug::Info mode selected."
          SEVERITY="--severity=info"
          ;;
        WARN|WARNING)
          echo "::debug::Wranings and Errors mode selected."
          SEVERITY="--severity=warning"
          ;;
        ERROR)
          echo "::debug::Error only mode selected."  # Easter egg
          SEVERITY="--severity=error"
          ;;
        *)
          SEVERITY="--severity=style"
          ;;
        esac

        if [ "$INPUT_PATH" == "UNDEFINED" ]; then
            INPUT_PATHS="${{ steps.shellfiles.outputs.files }}"
        else
            INPUT_PATHS="${INPUT_PATH}"
        fi

        $PYTHON ${SHELLCHECK_TOOL} $SHELL_TYPE $SEVERITY ${INPUT_PATHS} --output shellcheck.sarif
        echo "::endgroup::"
      env:
        INPUT_PATH: ${{ inputs.path }}
        INPUT_SEVERITY: ${{ inputs.severity }}
        INPUT_SHELL: ${{ inputs.shell-format }}
        PYTHON: ${{ steps.cp313.outputs.python-path }}
        SHELLCHECK_TOOL: "${{ github.action_path }}/bin/ShellCheckCLI.py"
      if: ${{ !cancelled() }}

    - name: "Upload artifact"
      uses: actions/upload-artifact@v4
      id: artifact-upload-step
      with:
        name: shellcheck.sarif
        path: shellcheck.sarif
        overwrite: true
        if-no-files-found: warn
        compression-level: 1  # don't waist time
      if: ${{ !cancelled() && (inputs.publish-artifacts == 'true') }}  # testing

    - name: "Upload SARIF file"
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: shellcheck.sarif
      if: ${{ !cancelled() }}
